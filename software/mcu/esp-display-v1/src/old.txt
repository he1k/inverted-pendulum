#include <Arduino.h>
#include <TFT_eSPI.h>
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#define BAUD 115200
#define NEW_LINE 0x0A
#define WHITE_SPACE 0x20
TFT_eSPI tft = TFT_eSPI();
File file;

// Define the pins used
// #define TFT_MOSI 13
// #define TFT_MISO 12
// #define TFT_SCLK 14
// #define TFT_CS   15
// #define TFT_DC   2
// #define TFT_BL   21
// #define TFT_CS   15
// #define TFT_RS   2
// #define TFT_SDO  12
// #define TFT_SDI  13
// #define TFT_SCK  14

// #define ILI9341_DRIVER

// // Define the pins for HSPI
// #define TFT_MISO 12
// #define TFT_MOSI 13
// #define TFT_SCLK 14
// #define TFT_CS   15  // Chip select control pin
// #define TFT_DC   2   // Data Command control pin
// #define TFT_RST  4   // Reset pin (could connect to NodeMCU RST, see next line)
// #define TFT_RST  -1
// //#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST

// // Define SPI port to use HSPI
// #define TFT_SPI_HOST HSPI_HOST
#define TFT_GREY 0x7BEF

unsigned long runTime = 0;

float sx = 0, sy = 0;
uint16_t x0 = 0, x1 = 0, yy0 = 0, yy1 = 0;
void print_pins(){
  Serial.print("TFT_MOSI: "); Serial.println(TFT_MOSI);
  Serial.print("TFT_MISO: "); Serial.println(TFT_MISO);
  Serial.print("TFT_SCLK: "); Serial.println(TFT_SCLK);
  Serial.print("TFT_CS:   "); Serial.println(TFT_CS);
  Serial.print("TFT_BL:   "); Serial.println(TFT_BL);
  Serial.print("TFT_RST:   "); Serial.println(TFT_RST);
}
unsigned int rainbow(int value);
uint16_t to_num(uint8_t D1, uint8_t D2, uint8_t D3)
{
  uint8_t D1_conv = D1 - 48;
  uint8_t D2_conv = D2 - 48;
  uint8_t D3_conv = D3 - 48;
  if(((D1_conv < 0) || (D1_conv > 9)) || ((D2_conv < 0) || (D2_conv > 9)) || ((D3_conv < 0) || (D3_conv > 9)))
  {
    return -1;
  }else{
    return D1_conv*100 + D2_conv*10 + D3_conv*1;
  }
}
// #define TFT_MISO 12
// #define TFT_SCLK 14
// #define TFT_CS 15
// #define TFT_BL 21
// #define TFT_RST 12
void setup(){
  Serial.begin(115200);

  // Set all chip selects high to avoid bus contention during initialisation of each peripheral
  digitalWrite(22, HIGH); // Touch controller chip select (if used)
  digitalWrite(15, HIGH); // TFT screen chip select
  digitalWrite( 5, HIGH); // SD card chips select, must use GPIO 5 (ESP32 SS)
  tft.begin();

  if (!SD.begin(5, tft.getSPIinstance())) {
    Serial.println("Card Mount Failed");
    return;
  }
  uint8_t cardType = SD.cardType();

  if (cardType == CARD_NONE) {
    Serial.println("No SD card attached");
    return;
  }

  Serial.print("SD Card Type: ");
  if (cardType == CARD_MMC) {
    Serial.println("MMC");
  } else if (cardType == CARD_SD) {
    Serial.println("SDSC");
  } else if (cardType == CARD_SDHC) {
    Serial.println("SDHC");
  } else {
    Serial.println("UNKNOWN");
  }

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);

  Serial.println("initialisation done.");
  // Serial.begin(BAUD);
  // digitalWrite(22, HIGH); // Touch controller chip select (if used)
  // digitalWrite(15, HIGH); // TFT screen chip select
  // digitalWrite( 5, HIGH); // SD card chips select, must use GPIO 5 (ESP32 SS)
  // // Setup SD card
  // //SPIClass spi = SPIClass(VSPI);
  // tft.begin();

  // //SPIClass sdSPI(VSPI);
  // //sdSPI.begin(18, 19, 23, 5); // SCLK, MISO, MOSI, SS (CS)
  // if (!SD.begin(5, tft.getSPIinstance())) {
  //   Serial.println("Card Mount Failed");
  //   return;
  // }
  // // if (!SD.begin(SS, sdSPI, 80000000)) {
  // //   Serial.println("Card Mount Failed");
  // //   return;
  // // }
  // uint8_t cardType = SD.cardType();
  // if (cardType == CARD_NONE) {
  //   Serial.println("No SD card attached");
  //   return;
  // }
  // file = SD.open("/folderA/lenna.ppm");
  // if(!file){
  //   Serial.println("Failed open file");
  // }else{
  //   Serial.println("Success");  
  // }
  // char format[2];
  // format[0] = (char) file.read();
  // format[1] = (char) file.read();
  // if(file.read() != NEW_LINE){
  //   Serial.println("Missing new line");
  // }
  // if(file.read() == 35){
  //   Serial.println("Comment included");
  // }else{
  //   Serial.println("No comment included");
  // }
  // uint8_t cnt = 0;
  // while(file.read() != NEW_LINE){
  //   cnt++;
  //   if(cnt == 255){
  //     Serial.println("Too long comment");
  //     break;
  //   }
  // }
  // Serial.print("Comment size: ");
  // Serial.println(cnt);
  // uint8_t b = file.read();
  // uint16_t width = 0, height = 0;
  // uint8_t d[3];
  // uint8_t idx = 0;
  // while(1){
  //   Serial.println(idx);
  //   if(b == WHITE_SPACE)
  //   {
  //     width = to_num(d[0], d[1], d[2]);
  //     Serial.print("Width = ");
  //     Serial.println(width);
  //     idx = 0;
  //   }else if(b == NEW_LINE)
  //   {
  //     height = to_num(d[0], d[1], d[2]);
  //     Serial.print("Height = ");
  //     Serial.println(height);
  //     break;
  //   }else{
  //     d[idx] = b;
  //     idx++;
  //   }
  //   b = file.read();
  // }
}
void loop(){
  runTime = millis();

 tft.setRotation(3);
  tft.fillScreen(TFT_BLACK);
  tft.startWrite();
  for (int px = 1; px < 320; px++)
  {
    for (int py = 0; py < 240; py++)
    {
      float x0 = (map(px, 0, 320, -250000/2, -242500/2)) / 100000.0; //scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.5, 1))
      float yy0 = (map(py, 0, 240, -75000/4, -61000/4)) / 100000.0; //scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1, 1))
      float xx = 0.0;
      float yy = 0.0;
      int iteration = 0;
      int max_iteration = 128;
      while ( ((xx * xx + yy * yy) < 4)  &&  (iteration < max_iteration) )
      {
        float xtemp = xx * xx - yy * yy + x0;
        yy = 2 * xx * yy + yy0;
        xx = xtemp;
        iteration++;
      }
      int color = rainbow((3*iteration+64)%128);
      yield();tft.drawPixel(px, py, color);
    }
  }
  tft.endWrite();

  Serial.println(millis()-runTime);
  while(1) yield();
}

unsigned int rainbow(int value)
{
  // Value is expected to be in range 0-127
  // The value is converted to a spectrum colour from 0 = blue through to red = blue

  byte red = 0; // Red is the top 5 bits of a 16-bit colour value
  byte green = 0;// Green is the middle 6 bits
  byte blue = 0; // Blue is the bottom 5 bits

  byte quadrant = value / 32;

  if (quadrant == 0) {
    blue = 31;
    green = 2 * (value % 32);
    red = 0;
  }
  if (quadrant == 1) {
    blue = 31 - (value % 32);
    green = 63;
    red = 0;
  }
  if (quadrant == 2) {
    blue = 0;
    green = 63;
    red = value % 32;
  }
  if (quadrant == 3) {
    blue = 0;
    green = 63 - 2 * (value % 32);
    red = 31;
  }
  return (red << 11) + (green << 5) + blue;
}